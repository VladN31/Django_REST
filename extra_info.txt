







sterilizer.py
---------------------------------------


# from rest_framework import serializers
# from book_api.models import Book


# class BookSerielizer(serializers.Serializer):
#     id = serializers.IntegerField(read_only=True)
#     title = serializers.CharField()
#     number_of_pages = serializers.IntegerField()
#     publish_date = serializers.DateField()
#     quantity = serializers.IntegerField()


#     def create(self, data):
#         return Book.objects.create(**data) 

#     def update(self, instance, data):
#         instance.title = data.get('title', instance.title)
#         instance.number_of_pages = data.get('number_of_pages', instance.number_of_pages)
#         instance.publish_date = data.get('publish_date', instance.publish_date)
#         instance.quantity = data.get('quantity', instance.quantity) 

#         instance.save()
#         return instance


------------------------------------

Views.py

-------------------------------------------



# from pickle import TRUE
# from django.shortcuts import render
# from book_api.models import Book
# from rest_framework.response import Response
# from rest_framework.decorators import api_view
# from rest_framework import status
# from book_api.serielizer import BookSerielizer



# # Create your views here.

# @api_view(['GET'])
# def book_list(request):
#     books = Book.objects.all() # Complex Data
#     serializer = BookSerielizer(books, many=True)
#     return Response(serializer.data)


# @api_view(['POST'])
# def book_create(request):
#     serielizer = BookSerielizer(data=request.data)
#     if serielizer.is_valid():
#         serielizer.save()
#         return Response(serielizer.data)
#     else:
#         return Response(serielizer.errors, status=status.HTTP_400_BAD_REQUEST)


# @api_view(['GET', 'PUT', 'DELETE'])
# def book(request, pk):
#     try:
#         book = Book.objects.get(pk=pk)
#     except:
#         return Response({
#             'error': 'Book does not exist'   
#         }, status=status.HTTP_404_NOT_FOUND)

#     if request.method == 'GET':
#         serializer = BookSerielizer(book)
#         return Response(serializer.data)

#     if request.method == "PUT":
#         serializer = BookSerielizer(book, data=request.data)
#         if serializer.is_valid():
#             serializer.save()
#             return Response(serializer.data)
#         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

#     if request.method == "DELETE":
#         book.delete()
#         return Response (status=status.HTTP_204_NO_CONTENT)
        